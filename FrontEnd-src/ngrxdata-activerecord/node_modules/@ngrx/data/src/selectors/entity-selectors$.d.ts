import { Store } from '@ngrx/store';
import { Actions } from '@ngrx/effects';
import { Dictionary } from '@ngrx/entity';
import { Observable } from 'rxjs';
import { EntityAction } from '../actions/entity-action';
import { EntityCacheSelector } from './entity-cache-selector';
import { EntitySelectors } from './entity-selectors';
import { EntityCache } from '../reducers/entity-cache';
import { EntityCollection, ChangeStateMap } from '../reducers/entity-collection';
/**
 * The selector observable functions for entity collection members.
 */
import * as ɵngcc0 from '@angular/core';
export interface EntitySelectors$<T> {
    /** Name of the entity collection for these selectors$ */
    readonly entityName: string;
    /** Names from custom selectors from additionalCollectionState fits here, 'any' to avoid conflict with entityName */
    readonly [name: string]: Observable<any> | Store<any> | any;
    /** Observable of the collection as a whole */
    readonly collection$: Observable<EntityCollection> | Store<EntityCollection>;
    /** Observable of count of entities in the cached collection. */
    readonly count$: Observable<number> | Store<number>;
    /** Observable of all entities in the cached collection. */
    readonly entities$: Observable<T[]> | Store<T[]>;
    /** Observable of actions related to this entity type. */
    readonly entityActions$: Observable<EntityAction>;
    /** Observable of the map of entity keys to entities */
    readonly entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;
    /** Observable of error actions related to this entity type. */
    readonly errors$: Observable<EntityAction>;
    /** Observable of the filter pattern applied by the entity collection's filter function */
    readonly filter$: Observable<string> | Store<string>;
    /** Observable of entities in the cached collection that pass the filter function */
    readonly filteredEntities$: Observable<T[]> | Store<T[]>;
    /** Observable of the keys of the cached collection, in the collection's native sort order */
    readonly keys$: Observable<string[] | number[]> | Store<string[] | number[]>;
    /** Observable true when the collection has been loaded */
    readonly loaded$: Observable<boolean> | Store<boolean>;
    /** Observable true when a multi-entity query command is in progress. */
    readonly loading$: Observable<boolean> | Store<boolean>;
    /** ChangeState (including original values) of entities with unsaved changes */
    readonly changeState$: Observable<ChangeStateMap<T>> | Store<ChangeStateMap<T>>;
}
/** Creates observable EntitySelectors$ for entity collections. */
export declare class EntitySelectors$Factory {
    private store;
    private actions;
    private selectEntityCache;
    /** Observable of the EntityCache */
    entityCache$: Observable<EntityCache>;
    /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */
    entityActionErrors$: Observable<EntityAction>;
    constructor(store: Store<any>, actions: Actions<EntityAction>, selectEntityCache: EntityCacheSelector);
    /**
     * Creates an entity collection's selectors$ observables for this factory's store.
     * `selectors$` are observable selectors of the cached entity collection.
     * @param entityName - is also the name of the collection.
     * @param selectors - selector functions for this collection.
     **/
    create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(entityName: string, selectors: EntitySelectors<T>): S$;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EntitySelectors$Factory>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EntitySelectors$Factory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXNlbGVjdG9ycyQuZC50cyIsInNvdXJjZXMiOlsiZW50aXR5LXNlbGVjdG9ycyQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0NBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnQG5ncngvZW50aXR5JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVudGl0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWFjdGlvbic7XG5pbXBvcnQgeyBFbnRpdHlDYWNoZVNlbGVjdG9yIH0gZnJvbSAnLi9lbnRpdHktY2FjaGUtc2VsZWN0b3InO1xuaW1wb3J0IHsgRW50aXR5U2VsZWN0b3JzIH0gZnJvbSAnLi9lbnRpdHktc2VsZWN0b3JzJztcbmltcG9ydCB7IEVudGl0eUNhY2hlIH0gZnJvbSAnLi4vcmVkdWNlcnMvZW50aXR5LWNhY2hlJztcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb24sIENoYW5nZVN0YXRlTWFwIH0gZnJvbSAnLi4vcmVkdWNlcnMvZW50aXR5LWNvbGxlY3Rpb24nO1xuLyoqXG4gKiBUaGUgc2VsZWN0b3Igb2JzZXJ2YWJsZSBmdW5jdGlvbnMgZm9yIGVudGl0eSBjb2xsZWN0aW9uIG1lbWJlcnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5U2VsZWN0b3JzJDxUPiB7XG4gICAgLyoqIE5hbWUgb2YgdGhlIGVudGl0eSBjb2xsZWN0aW9uIGZvciB0aGVzZSBzZWxlY3RvcnMkICovXG4gICAgcmVhZG9ubHkgZW50aXR5TmFtZTogc3RyaW5nO1xuICAgIC8qKiBOYW1lcyBmcm9tIGN1c3RvbSBzZWxlY3RvcnMgZnJvbSBhZGRpdGlvbmFsQ29sbGVjdGlvblN0YXRlIGZpdHMgaGVyZSwgJ2FueScgdG8gYXZvaWQgY29uZmxpY3Qgd2l0aCBlbnRpdHlOYW1lICovXG4gICAgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ic2VydmFibGU8YW55PiB8IFN0b3JlPGFueT4gfCBhbnk7XG4gICAgLyoqIE9ic2VydmFibGUgb2YgdGhlIGNvbGxlY3Rpb24gYXMgYSB3aG9sZSAqL1xuICAgIHJlYWRvbmx5IGNvbGxlY3Rpb24kOiBPYnNlcnZhYmxlPEVudGl0eUNvbGxlY3Rpb24+IHwgU3RvcmU8RW50aXR5Q29sbGVjdGlvbj47XG4gICAgLyoqIE9ic2VydmFibGUgb2YgY291bnQgb2YgZW50aXRpZXMgaW4gdGhlIGNhY2hlZCBjb2xsZWN0aW9uLiAqL1xuICAgIHJlYWRvbmx5IGNvdW50JDogT2JzZXJ2YWJsZTxudW1iZXI+IHwgU3RvcmU8bnVtYmVyPjtcbiAgICAvKiogT2JzZXJ2YWJsZSBvZiBhbGwgZW50aXRpZXMgaW4gdGhlIGNhY2hlZCBjb2xsZWN0aW9uLiAqL1xuICAgIHJlYWRvbmx5IGVudGl0aWVzJDogT2JzZXJ2YWJsZTxUW10+IHwgU3RvcmU8VFtdPjtcbiAgICAvKiogT2JzZXJ2YWJsZSBvZiBhY3Rpb25zIHJlbGF0ZWQgdG8gdGhpcyBlbnRpdHkgdHlwZS4gKi9cbiAgICByZWFkb25seSBlbnRpdHlBY3Rpb25zJDogT2JzZXJ2YWJsZTxFbnRpdHlBY3Rpb24+O1xuICAgIC8qKiBPYnNlcnZhYmxlIG9mIHRoZSBtYXAgb2YgZW50aXR5IGtleXMgdG8gZW50aXRpZXMgKi9cbiAgICByZWFkb25seSBlbnRpdHlNYXAkOiBPYnNlcnZhYmxlPERpY3Rpb25hcnk8VD4+IHwgU3RvcmU8RGljdGlvbmFyeTxUPj47XG4gICAgLyoqIE9ic2VydmFibGUgb2YgZXJyb3IgYWN0aW9ucyByZWxhdGVkIHRvIHRoaXMgZW50aXR5IHR5cGUuICovXG4gICAgcmVhZG9ubHkgZXJyb3JzJDogT2JzZXJ2YWJsZTxFbnRpdHlBY3Rpb24+O1xuICAgIC8qKiBPYnNlcnZhYmxlIG9mIHRoZSBmaWx0ZXIgcGF0dGVybiBhcHBsaWVkIGJ5IHRoZSBlbnRpdHkgY29sbGVjdGlvbidzIGZpbHRlciBmdW5jdGlvbiAqL1xuICAgIHJlYWRvbmx5IGZpbHRlciQ6IE9ic2VydmFibGU8c3RyaW5nPiB8IFN0b3JlPHN0cmluZz47XG4gICAgLyoqIE9ic2VydmFibGUgb2YgZW50aXRpZXMgaW4gdGhlIGNhY2hlZCBjb2xsZWN0aW9uIHRoYXQgcGFzcyB0aGUgZmlsdGVyIGZ1bmN0aW9uICovXG4gICAgcmVhZG9ubHkgZmlsdGVyZWRFbnRpdGllcyQ6IE9ic2VydmFibGU8VFtdPiB8IFN0b3JlPFRbXT47XG4gICAgLyoqIE9ic2VydmFibGUgb2YgdGhlIGtleXMgb2YgdGhlIGNhY2hlZCBjb2xsZWN0aW9uLCBpbiB0aGUgY29sbGVjdGlvbidzIG5hdGl2ZSBzb3J0IG9yZGVyICovXG4gICAgcmVhZG9ubHkga2V5cyQ6IE9ic2VydmFibGU8c3RyaW5nW10gfCBudW1iZXJbXT4gfCBTdG9yZTxzdHJpbmdbXSB8IG51bWJlcltdPjtcbiAgICAvKiogT2JzZXJ2YWJsZSB0cnVlIHdoZW4gdGhlIGNvbGxlY3Rpb24gaGFzIGJlZW4gbG9hZGVkICovXG4gICAgcmVhZG9ubHkgbG9hZGVkJDogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFN0b3JlPGJvb2xlYW4+O1xuICAgIC8qKiBPYnNlcnZhYmxlIHRydWUgd2hlbiBhIG11bHRpLWVudGl0eSBxdWVyeSBjb21tYW5kIGlzIGluIHByb2dyZXNzLiAqL1xuICAgIHJlYWRvbmx5IGxvYWRpbmckOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgU3RvcmU8Ym9vbGVhbj47XG4gICAgLyoqIENoYW5nZVN0YXRlIChpbmNsdWRpbmcgb3JpZ2luYWwgdmFsdWVzKSBvZiBlbnRpdGllcyB3aXRoIHVuc2F2ZWQgY2hhbmdlcyAqL1xuICAgIHJlYWRvbmx5IGNoYW5nZVN0YXRlJDogT2JzZXJ2YWJsZTxDaGFuZ2VTdGF0ZU1hcDxUPj4gfCBTdG9yZTxDaGFuZ2VTdGF0ZU1hcDxUPj47XG59XG4vKiogQ3JlYXRlcyBvYnNlcnZhYmxlIEVudGl0eVNlbGVjdG9ycyQgZm9yIGVudGl0eSBjb2xsZWN0aW9ucy4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVudGl0eVNlbGVjdG9ycyRGYWN0b3J5IHtcbiAgICBwcml2YXRlIHN0b3JlO1xuICAgIHByaXZhdGUgYWN0aW9ucztcbiAgICBwcml2YXRlIHNlbGVjdEVudGl0eUNhY2hlO1xuICAgIC8qKiBPYnNlcnZhYmxlIG9mIHRoZSBFbnRpdHlDYWNoZSAqL1xuICAgIGVudGl0eUNhY2hlJDogT2JzZXJ2YWJsZTxFbnRpdHlDYWNoZT47XG4gICAgLyoqIE9ic2VydmFibGUgb2YgZXJyb3IgRW50aXR5QWN0aW9ucyAoZS5nLiBRVUVSWV9BTExfRVJST1IpIGZvciBhbGwgZW50aXR5IHR5cGVzICovXG4gICAgZW50aXR5QWN0aW9uRXJyb3JzJDogT2JzZXJ2YWJsZTxFbnRpdHlBY3Rpb24+O1xuICAgIGNvbnN0cnVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+LCBhY3Rpb25zOiBBY3Rpb25zPEVudGl0eUFjdGlvbj4sIHNlbGVjdEVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZVNlbGVjdG9yKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVudGl0eSBjb2xsZWN0aW9uJ3Mgc2VsZWN0b3JzJCBvYnNlcnZhYmxlcyBmb3IgdGhpcyBmYWN0b3J5J3Mgc3RvcmUuXG4gICAgICogYHNlbGVjdG9ycyRgIGFyZSBvYnNlcnZhYmxlIHNlbGVjdG9ycyBvZiB0aGUgY2FjaGVkIGVudGl0eSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBlbnRpdHlOYW1lIC0gaXMgYWxzbyB0aGUgbmFtZSBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3JzIC0gc2VsZWN0b3IgZnVuY3Rpb25zIGZvciB0aGlzIGNvbGxlY3Rpb24uXG4gICAgICoqL1xuICAgIGNyZWF0ZTxULCBTJCBleHRlbmRzIEVudGl0eVNlbGVjdG9ycyQ8VD4gPSBFbnRpdHlTZWxlY3RvcnMkPFQ+PihlbnRpdHlOYW1lOiBzdHJpbmcsIHNlbGVjdG9yczogRW50aXR5U2VsZWN0b3JzPFQ+KTogUyQ7XG59XG4iXX0=