import { MetaReducer } from '@ngrx/store';
import { EntityAction } from '../actions/entity-action';
import { EntityCollection } from './entity-collection';
import { EntityCollectionReducer, EntityCollectionReducerFactory } from './entity-collection-reducer';
/** A hash of EntityCollectionReducers */
import * as ɵngcc0 from '@angular/core';
export interface EntityCollectionReducers {
    [entity: string]: EntityCollectionReducer<any>;
}
/**
 * Registry of entity types and their previously-constructed reducers.
 * Can create a new CollectionReducer, which it registers for subsequent use.
 */
export declare class EntityCollectionReducerRegistry {
    private entityCollectionReducerFactory;
    protected entityCollectionReducers: EntityCollectionReducers;
    private entityCollectionMetaReducer;
    constructor(entityCollectionReducerFactory: EntityCollectionReducerFactory, entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[]);
    /**
     * Get the registered EntityCollectionReducer<T> for this entity type or create one and register it.
     * @param entityName Name of the entity type for this reducer
     */
    getOrCreateReducer<T>(entityName: string): EntityCollectionReducer<T>;
    /**
     * Register an EntityCollectionReducer for an entity type
     * @param entityName - the name of the entity type
     * @param reducer - reducer for that entity type
     *
     * Examples:
     *   registerReducer('Hero', myHeroReducer);
     *   registerReducer('Villain', myVillainReducer);
     */
    registerReducer<T>(entityName: string, reducer: EntityCollectionReducer<T>): EntityCollectionReducer<T>;
    /**
     * Register a batch of EntityCollectionReducers.
     * @param reducers - reducers to merge into existing reducers
     *
     * Examples:
     *   registerReducers({
     *     Hero: myHeroReducer,
     *     Villain: myVillainReducer
     *   });
     */
    registerReducers(reducers: EntityCollectionReducers): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EntityCollectionReducerRegistry>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EntityCollectionReducerRegistry>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWNvbGxlY3Rpb24tcmVkdWNlci1yZWdpc3RyeS5kLnRzIiwic291cmNlcyI6WyJlbnRpdHktY29sbGVjdGlvbi1yZWR1Y2VyLXJlZ2lzdHJ5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0NBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YVJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFbnRpdHlBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zL2VudGl0eS1hY3Rpb24nO1xuaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvbiB9IGZyb20gJy4vZW50aXR5LWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvblJlZHVjZXIsIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyRmFjdG9yeSB9IGZyb20gJy4vZW50aXR5LWNvbGxlY3Rpb24tcmVkdWNlcic7XG4vKiogQSBoYXNoIG9mIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VycyAqL1xuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnMge1xuICAgIFtlbnRpdHk6IHN0cmluZ106IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyPGFueT47XG59XG4vKipcbiAqIFJlZ2lzdHJ5IG9mIGVudGl0eSB0eXBlcyBhbmQgdGhlaXIgcHJldmlvdXNseS1jb25zdHJ1Y3RlZCByZWR1Y2Vycy5cbiAqIENhbiBjcmVhdGUgYSBuZXcgQ29sbGVjdGlvblJlZHVjZXIsIHdoaWNoIGl0IHJlZ2lzdGVycyBmb3Igc3Vic2VxdWVudCB1c2UuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyUmVnaXN0cnkge1xuICAgIHByaXZhdGUgZW50aXR5Q29sbGVjdGlvblJlZHVjZXJGYWN0b3J5O1xuICAgIHByb3RlY3RlZCBlbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnM6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VycztcbiAgICBwcml2YXRlIGVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcjtcbiAgICBjb25zdHJ1Y3RvcihlbnRpdHlDb2xsZWN0aW9uUmVkdWNlckZhY3Rvcnk6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyRmFjdG9yeSwgZW50aXR5Q29sbGVjdGlvbk1ldGFSZWR1Y2Vycz86IE1ldGFSZWR1Y2VyPEVudGl0eUNvbGxlY3Rpb24sIEVudGl0eUFjdGlvbj5bXSk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWdpc3RlcmVkIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyPFQ+IGZvciB0aGlzIGVudGl0eSB0eXBlIG9yIGNyZWF0ZSBvbmUgYW5kIHJlZ2lzdGVyIGl0LlxuICAgICAqIEBwYXJhbSBlbnRpdHlOYW1lIE5hbWUgb2YgdGhlIGVudGl0eSB0eXBlIGZvciB0aGlzIHJlZHVjZXJcbiAgICAgKi9cbiAgICBnZXRPckNyZWF0ZVJlZHVjZXI8VD4oZW50aXR5TmFtZTogc3RyaW5nKTogRW50aXR5Q29sbGVjdGlvblJlZHVjZXI8VD47XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYW4gRW50aXR5Q29sbGVjdGlvblJlZHVjZXIgZm9yIGFuIGVudGl0eSB0eXBlXG4gICAgICogQHBhcmFtIGVudGl0eU5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgZW50aXR5IHR5cGVcbiAgICAgKiBAcGFyYW0gcmVkdWNlciAtIHJlZHVjZXIgZm9yIHRoYXQgZW50aXR5IHR5cGVcbiAgICAgKlxuICAgICAqIEV4YW1wbGVzOlxuICAgICAqICAgcmVnaXN0ZXJSZWR1Y2VyKCdIZXJvJywgbXlIZXJvUmVkdWNlcik7XG4gICAgICogICByZWdpc3RlclJlZHVjZXIoJ1ZpbGxhaW4nLCBteVZpbGxhaW5SZWR1Y2VyKTtcbiAgICAgKi9cbiAgICByZWdpc3RlclJlZHVjZXI8VD4oZW50aXR5TmFtZTogc3RyaW5nLCByZWR1Y2VyOiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlcjxUPik6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyPFQ+O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgYmF0Y2ggb2YgRW50aXR5Q29sbGVjdGlvblJlZHVjZXJzLlxuICAgICAqIEBwYXJhbSByZWR1Y2VycyAtIHJlZHVjZXJzIHRvIG1lcmdlIGludG8gZXhpc3RpbmcgcmVkdWNlcnNcbiAgICAgKlxuICAgICAqIEV4YW1wbGVzOlxuICAgICAqICAgcmVnaXN0ZXJSZWR1Y2Vycyh7XG4gICAgICogICAgIEhlcm86IG15SGVyb1JlZHVjZXIsXG4gICAgICogICAgIFZpbGxhaW46IG15VmlsbGFpblJlZHVjZXJcbiAgICAgKiAgIH0pO1xuICAgICAqL1xuICAgIHJlZ2lzdGVyUmVkdWNlcnMocmVkdWNlcnM6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2Vycyk6IHZvaWQ7XG59XG4iXX0=