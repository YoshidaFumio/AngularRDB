import { Action, ActionReducer } from '@ngrx/store';
import { EntityCache } from './entity-cache';
import { ClearCollections, LoadCollections, MergeQuerySet, SaveEntities, SaveEntitiesCancel, SaveEntitiesError, SaveEntitiesSuccess } from '../actions/entity-cache-action';
import { EntityCollectionCreator } from './entity-collection-creator';
import { EntityCollectionReducerRegistry } from './entity-collection-reducer-registry';
import { Logger } from '../utils/interfaces';
/**
 * Creates the EntityCacheReducer via its create() method
 */
import * as ɵngcc0 from '@angular/core';
export declare class EntityCacheReducerFactory {
    private entityCollectionCreator;
    private entityCollectionReducerRegistry;
    private logger;
    constructor(entityCollectionCreator: EntityCollectionCreator, entityCollectionReducerRegistry: EntityCollectionReducerRegistry, logger: Logger);
    /**
     * Create the @ngrx/data entity cache reducer which either responds to entity cache level actions
     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.
     */
    create(): ActionReducer<EntityCache, Action>;
    /**
     * Reducer to clear multiple collections at the same time.
     * @param entityCache the entity cache
     * @param action a ClearCollections action whose payload is an array of collection names.
     * If empty array, does nothing. If no array, clears all the collections.
     */
    protected clearCollectionsReducer(entityCache: EntityCache, action: ClearCollections): EntityCache;
    /**
     * Reducer to load collection in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a LoadCollections action whose payload is the QuerySet of entity collections to load
     */
    protected loadCollectionsReducer(entityCache: EntityCache, action: LoadCollections): EntityCache;
    /**
     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a MergeQuerySet action with the query set and a MergeStrategy
     */
    protected mergeQuerySetReducer(entityCache: EntityCache, action: MergeQuerySet): EntityCache;
    protected saveEntitiesReducer(entityCache: EntityCache, action: SaveEntities): EntityCache;
    protected saveEntitiesCancelReducer(entityCache: EntityCache, action: SaveEntitiesCancel): EntityCache;
    protected saveEntitiesErrorReducer(entityCache: EntityCache, action: SaveEntitiesError): EntityCache;
    protected saveEntitiesSuccessReducer(entityCache: EntityCache, action: SaveEntitiesSuccess): EntityCache;
    /** Apply reducer for the action's EntityCollection (if the action targets a collection) */
    private applyCollectionReducer;
    /** Ensure loading is false for every collection in entityNames */
    private clearLoadingFlags;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EntityCacheReducerFactory>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EntityCacheReducerFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWNhY2hlLXJlZHVjZXIuZC50cyIsInNvdXJjZXMiOlsiZW50aXR5LWNhY2hlLXJlZHVjZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24sIEFjdGlvblJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFbnRpdHlDYWNoZSB9IGZyb20gJy4vZW50aXR5LWNhY2hlJztcbmltcG9ydCB7IENsZWFyQ29sbGVjdGlvbnMsIExvYWRDb2xsZWN0aW9ucywgTWVyZ2VRdWVyeVNldCwgU2F2ZUVudGl0aWVzLCBTYXZlRW50aXRpZXNDYW5jZWwsIFNhdmVFbnRpdGllc0Vycm9yLCBTYXZlRW50aXRpZXNTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9lbnRpdHktY2FjaGUtYWN0aW9uJztcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb25DcmVhdG9yIH0gZnJvbSAnLi9lbnRpdHktY29sbGVjdGlvbi1jcmVhdG9yJztcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyUmVnaXN0cnkgfSBmcm9tICcuL2VudGl0eS1jb2xsZWN0aW9uLXJlZHVjZXItcmVnaXN0cnknO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XG4vKipcbiAqIENyZWF0ZXMgdGhlIEVudGl0eUNhY2hlUmVkdWNlciB2aWEgaXRzIGNyZWF0ZSgpIG1ldGhvZFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFbnRpdHlDYWNoZVJlZHVjZXJGYWN0b3J5IHtcbiAgICBwcml2YXRlIGVudGl0eUNvbGxlY3Rpb25DcmVhdG9yO1xuICAgIHByaXZhdGUgZW50aXR5Q29sbGVjdGlvblJlZHVjZXJSZWdpc3RyeTtcbiAgICBwcml2YXRlIGxvZ2dlcjtcbiAgICBjb25zdHJ1Y3RvcihlbnRpdHlDb2xsZWN0aW9uQ3JlYXRvcjogRW50aXR5Q29sbGVjdGlvbkNyZWF0b3IsIGVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyUmVnaXN0cnk6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyUmVnaXN0cnksIGxvZ2dlcjogTG9nZ2VyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIEBuZ3J4L2RhdGEgZW50aXR5IGNhY2hlIHJlZHVjZXIgd2hpY2ggZWl0aGVyIHJlc3BvbmRzIHRvIGVudGl0eSBjYWNoZSBsZXZlbCBhY3Rpb25zXG4gICAgICogb3IgKG1vcmUgY29tbW9ubHkpIGRlbGVnYXRlcyB0byBhbiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlciBiYXNlZCBvbiB0aGUgYWN0aW9uLnBheWxvYWQuZW50aXR5TmFtZS5cbiAgICAgKi9cbiAgICBjcmVhdGUoKTogQWN0aW9uUmVkdWNlcjxFbnRpdHlDYWNoZSwgQWN0aW9uPjtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2VyIHRvIGNsZWFyIG11bHRpcGxlIGNvbGxlY3Rpb25zIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICogQHBhcmFtIGVudGl0eUNhY2hlIHRoZSBlbnRpdHkgY2FjaGVcbiAgICAgKiBAcGFyYW0gYWN0aW9uIGEgQ2xlYXJDb2xsZWN0aW9ucyBhY3Rpb24gd2hvc2UgcGF5bG9hZCBpcyBhbiBhcnJheSBvZiBjb2xsZWN0aW9uIG5hbWVzLlxuICAgICAqIElmIGVtcHR5IGFycmF5LCBkb2VzIG5vdGhpbmcuIElmIG5vIGFycmF5LCBjbGVhcnMgYWxsIHRoZSBjb2xsZWN0aW9ucy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2xlYXJDb2xsZWN0aW9uc1JlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IENsZWFyQ29sbGVjdGlvbnMpOiBFbnRpdHlDYWNoZTtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2VyIHRvIGxvYWQgY29sbGVjdGlvbiBpbiB0aGUgZm9ybSBvZiBhIGhhc2ggb2YgZW50aXR5IGRhdGEgZm9yIG11bHRpcGxlIGNvbGxlY3Rpb25zLlxuICAgICAqIEBwYXJhbSBlbnRpdHlDYWNoZSB0aGUgZW50aXR5IGNhY2hlXG4gICAgICogQHBhcmFtIGFjdGlvbiBhIExvYWRDb2xsZWN0aW9ucyBhY3Rpb24gd2hvc2UgcGF5bG9hZCBpcyB0aGUgUXVlcnlTZXQgb2YgZW50aXR5IGNvbGxlY3Rpb25zIHRvIGxvYWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbG9hZENvbGxlY3Rpb25zUmVkdWNlcihlbnRpdHlDYWNoZTogRW50aXR5Q2FjaGUsIGFjdGlvbjogTG9hZENvbGxlY3Rpb25zKTogRW50aXR5Q2FjaGU7XG4gICAgLyoqXG4gICAgICogUmVkdWNlciB0byBtZXJnZSBxdWVyeSBzZXRzIGluIHRoZSBmb3JtIG9mIGEgaGFzaCBvZiBlbnRpdHkgZGF0YSBmb3IgbXVsdGlwbGUgY29sbGVjdGlvbnMuXG4gICAgICogQHBhcmFtIGVudGl0eUNhY2hlIHRoZSBlbnRpdHkgY2FjaGVcbiAgICAgKiBAcGFyYW0gYWN0aW9uIGEgTWVyZ2VRdWVyeVNldCBhY3Rpb24gd2l0aCB0aGUgcXVlcnkgc2V0IGFuZCBhIE1lcmdlU3RyYXRlZ3lcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbWVyZ2VRdWVyeVNldFJlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IE1lcmdlUXVlcnlTZXQpOiBFbnRpdHlDYWNoZTtcbiAgICBwcm90ZWN0ZWQgc2F2ZUVudGl0aWVzUmVkdWNlcihlbnRpdHlDYWNoZTogRW50aXR5Q2FjaGUsIGFjdGlvbjogU2F2ZUVudGl0aWVzKTogRW50aXR5Q2FjaGU7XG4gICAgcHJvdGVjdGVkIHNhdmVFbnRpdGllc0NhbmNlbFJlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IFNhdmVFbnRpdGllc0NhbmNlbCk6IEVudGl0eUNhY2hlO1xuICAgIHByb3RlY3RlZCBzYXZlRW50aXRpZXNFcnJvclJlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IFNhdmVFbnRpdGllc0Vycm9yKTogRW50aXR5Q2FjaGU7XG4gICAgcHJvdGVjdGVkIHNhdmVFbnRpdGllc1N1Y2Nlc3NSZWR1Y2VyKGVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZSwgYWN0aW9uOiBTYXZlRW50aXRpZXNTdWNjZXNzKTogRW50aXR5Q2FjaGU7XG4gICAgLyoqIEFwcGx5IHJlZHVjZXIgZm9yIHRoZSBhY3Rpb24ncyBFbnRpdHlDb2xsZWN0aW9uIChpZiB0aGUgYWN0aW9uIHRhcmdldHMgYSBjb2xsZWN0aW9uKSAqL1xuICAgIHByaXZhdGUgYXBwbHlDb2xsZWN0aW9uUmVkdWNlcjtcbiAgICAvKiogRW5zdXJlIGxvYWRpbmcgaXMgZmFsc2UgZm9yIGV2ZXJ5IGNvbGxlY3Rpb24gaW4gZW50aXR5TmFtZXMgKi9cbiAgICBwcml2YXRlIGNsZWFyTG9hZGluZ0ZsYWdzO1xufVxuIl19